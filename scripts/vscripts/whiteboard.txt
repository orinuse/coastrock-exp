/*****************************************************
	Collection of functions for switching a boss
	bot's loadout, which is handy for boss patterns
	or boss phases.
	
	Functions:
	1. BossInit()
	  - Initialises the entities needed for the boss logic to work.
	2. RunBossLogic()
	  - Popfile function to start the boss logic
	  - Sets the amount of phases and patterns a boss will have.
	  
	Backend functions:
	1. OnGameEvent_post_inventory_application()
	  - Calls a delayed ::BOSS.DoBossTag() with the spawned bot as
	  the param.
	2. ::BOSS.DoBossTag()
	  - Inserts a bot into the global "::BOSS.bossbots" array and
	  gives the bot "TagAppended" in its scope.
	3. OnGameEvent_player_death()
	  - Removes "TagAppended" from the scope of any dead boss robots.
	4. OnGameEvent_teamplay_round_win()
	  - Clears the ::BOSS.bossbots" array and removes "TagAppended" from the scopes of all robots.
	
*****************************************************/

/*****************************************************
	Mechanisms of the boss loadouts:
	  
	Boss logic works according to these variables set by a `BossInit()` call: 
	1. Phases
	  - A phase is the loadout(s) a boss changes to when
	  enough health is lost.
	2. Patterns
	  - Patterns are loadouts the boss'll randomly change
	  to during each phase.
	  
	When a boss bot wants to switch loadouts, the following is checked for:
	- Cancel the logic if it hasn't been 10s since the last pattern swap.
	- Make sure the new choice isn't identical to the last pattern choice.
	- Pick a pattern that corresponds to the boss bot's current phase.
	- - This is done with: bot's normalised health range <= each phase's "hp gates".
	- - - HP Range: Current HP / Max HP
	- - - HP Gate Base: 1.0 / Phase count
	- - - HP Gate: HP Range / (HP Gate Base * [0 to Phase count])
	
*****************************************************/